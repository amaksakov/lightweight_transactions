/*
 * Lightsaber - Lightweight Transactions Processing Engine
 * This is a money transfer support API.  You can find out more about it on the project  at [https://github.com/amaksakov/lightweight_transactions](https://github.com/amaksakov/lightweight_transactions)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: amaksakov@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amaksakov.lightsaber.model;

import java.util.Objects;
import java.util.Arrays;
import com.amaksakov.lightsaber.model.AccountId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ChargeCommand
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-26T12:26:01.127+01:00")
public class ChargeCommand {
  @SerializedName("account")
  private AccountId account = null;

  @SerializedName("amount")
  private Long amount = null;

  public ChargeCommand account(AccountId account) {
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @ApiModelProperty(value = "")
  public AccountId getAccount() {
    return account;
  }

  public void setAccount(AccountId account) {
    this.account = account;
  }

  public ChargeCommand amount(Long amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Charge/withdraw amount in cents
   * @return amount
  **/
  @ApiModelProperty(value = "Charge/withdraw amount in cents")
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargeCommand chargeCommand = (ChargeCommand) o;
    return Objects.equals(this.account, chargeCommand.account) &&
        Objects.equals(this.amount, chargeCommand.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, amount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargeCommand {\n");
    
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

